extern crate numas;
use numas::array::Array;

mod factory;

#[inline]
fn get_pointer<T: Clone>(array: Array<T>) -> *mut Array<T> {
    return Box::into_raw(Box::new(array));
}

#[no_mangle]
pub fn instantiate_index_array(length: usize) -> *mut Vec<i32> {
    let vector = Vec::with_capacity(length);
    return Box::into_raw(Box::new(vector));
}

//general
{{generate}}
#[no_mangle]
pub fn view_{{T}}(p: *mut Array<{{T}}>) -> *mut Array<{{T}}> {
    let p = unsafe { Box::from_raw(p) };
    let array = p.view();
    Box::into_raw(p);
    return get_pointer(array);
}

#[no_mangle]
pub fn clone_{{T}}(p: *mut Array<{{T}}>) -> *mut Array<{{T}}> {
    let p = unsafe { Box::from_raw(p) };
    let array = *p.clone();
    Box::into_raw(p);
    return get_pointer(array);
}

#[no_mangle]
pub fn len_{{T}}(p: *mut Array<{{T}}>) -> i32 {
    let p = unsafe { Box::from_raw(p) };
    let l = p.len() as i32;
    Box::into_raw(p);
    return l;
}
{{/generate}}

// trigonometric
{{generate}}
#[no_mangle]
pub fn sin_{{T}}(p: *mut Array<{{T}}>) -> *const Array<f64> {
    let p = unsafe { Box::from_raw(p) };
    let array = p.sin();
    Box::into_raw(p); 
    return get_pointer(array);
}

#[no_mangle]
pub fn cos_{{T}}(p: *mut Array<{{T}}>) -> *const Array<f64> {
    let p = unsafe { Box::from_raw(p) };
    let array = p.cos();
    Box::into_raw(p); 
    return get_pointer(array);
}

#[no_mangle]
pub fn arcsin_{{T}}(p: *mut Array<{{T}}>) -> *const Array<f64> {
    let p = unsafe { Box::from_raw(p) };
    let array = p.arcsin();
    Box::into_raw(p); 
    return get_pointer(array);
}

#[no_mangle]
pub fn arccos_{{T}}(p: *mut Array<{{T}}>) -> *const Array<f64> {
    let p = unsafe { Box::from_raw(p) };
    let array = p.arccos();
    Box::into_raw(p); 
    return get_pointer(array);
}

#[no_mangle]
pub fn arctan_{{T}}(p: *mut Array<{{T}}>) -> *const Array<f64> {
    let p = unsafe { Box::from_raw(p) };
    let array = p.arctan();
    Box::into_raw(p); 
    return get_pointer(array);
}

#[no_mangle]
pub fn degrees_{{T}}(p: *mut Array<{{T}}>) -> *const Array<f64> {
    let p = unsafe { Box::from_raw(p) };
    let array = p.degrees();
    Box::into_raw(p); 
    return get_pointer(array);
}

#[no_mangle]
pub fn radians_{{T}}(p: *mut Array<{{T}}>) -> *const Array<f64> {
    let p = unsafe { Box::from_raw(p) };
    let array = p.radians();
    Box::into_raw(p); 
    return get_pointer(array);
}

#[no_mangle]
pub fn deg2rad_{{T}}(p: *mut Array<{{T}}>) -> *const Array<f64> { 
    return radians_{{T}}(p);
}

#[no_mangle]
pub fn rad2deg_{{T}}(p: *mut Array<{{T}}>) -> *const Array<f64> { 
    return degrees_{{T}}(p);
}
{{/generate}}
