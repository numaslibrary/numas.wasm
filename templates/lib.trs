extern crate numas;
use numas::array::Array;

mod factory;
mod trigonometric;

#[inline]
fn get_pointer<T: Clone>(array: Array<T>) -> *mut Array<T> {
    return Box::into_raw(Box::new(array));
}

#[no_mangle]
pub fn instantiate_index_array(length: usize) -> *mut Vec<i32> {
    let vector = Vec::with_capacity(length);
    return Box::into_raw(Box::new(vector));
}

//general
{{generate}}
#[no_mangle]
pub fn view_{{T}}(p: *mut Array<{{T}}>) -> *mut Array<{{T}}> {
    let p = unsafe { Box::from_raw(p) };
    let array = p.view();
    Box::into_raw(p);
    return get_pointer(array);
}

#[no_mangle]
pub fn clone_{{T}}(p: *mut Array<{{T}}>) -> *mut Array<{{T}}> {
    let p = unsafe { Box::from_raw(p) };
    let array = *p.clone();
    Box::into_raw(p);
    return get_pointer(array);
}

#[no_mangle]
pub fn len_{{T}}(p: *mut Array<{{T}}>) -> i32 {
    let p = unsafe { Box::from_raw(p) };
    let l = p.len() as i32;
    Box::into_raw(p);
    return l;
}
{{/generate}}
