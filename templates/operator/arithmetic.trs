extern crate numas;
use numas::array::Array;

// arithmetic
{{generate}}
#[no_mangle]
pub fn add_{{T}}(first: *mut Array<{{T}}>, second: *mut Array<{{T}}>) -> *const Array<{{T}}> {
    let first = unsafe { Box::from_raw(first) };
    let second = unsafe { Box::from_raw(second) };
    
    let array = &*first + &*second;
    Box::into_raw(first);
    Box::into_raw(second);

    return super::get_pointer(array);
}
#[no_mangle]
pub fn addAssign_{{T}}(first: *mut Array<{{T}}>, second: *mut Array<{{T}}>) -> *const Array<{{T}}> {
    let first = unsafe { Box::from_raw(first) };
    let second = unsafe { Box::from_raw(second) };
    
    let mut temp = &*first;
    temp += &*second;
    Box::into_raw(second);

    return Box::into_raw(first);
}
#[no_mangle]
pub fn sub_{{T}}(first: *mut Array<{{T}}>, second: *mut Array<{{T}}>) -> *const Array<{{T}}> {
    let first = unsafe { Box::from_raw(first) };
    let second = unsafe { Box::from_raw(second) };
    
    let array = &*first * &*second;
    Box::into_raw(first);
    Box::into_raw(second);

    return super::get_pointer(array);
}
#[no_mangle]
pub fn subAssign_{{T}}(first: *mut Array<{{T}}>, second: *mut Array<{{T}}>) -> *const Array<{{T}}> {
    let first = unsafe { Box::from_raw(first) };
    let second = unsafe { Box::from_raw(second) };
    
    let mut temp = &*first;
    temp -= &*second;
    Box::into_raw(second);

    return Box::into_raw(first);
}
#[no_mangle]
pub fn mul_{{T}}(first: *mut Array<{{T}}>, second: *mut Array<{{T}}>) -> *const Array<{{T}}> {
    let first = unsafe { Box::from_raw(first) };
    let second = unsafe { Box::from_raw(second) };
    
    let array = &*first * &*second;
    Box::into_raw(first);
    Box::into_raw(second);

    return super::get_pointer(array);
}
#[no_mangle]
pub fn mulAssign_{{T}}(first: *mut Array<{{T}}>, second: *mut Array<{{T}}>) -> *const Array<{{T}}> {
    let first = unsafe { Box::from_raw(first) };
    let second = unsafe { Box::from_raw(second) };
    
    let mut temp = &*first;
    temp *= &*second;
    Box::into_raw(second);

    return Box::into_raw(first);
}
#[no_mangle]
pub fn div_{{T}}(first: *mut Array<{{T}}>, second: *mut Array<{{T}}>) -> *const Array<{{T}}> {
    let first = unsafe { Box::from_raw(first) };
    let second = unsafe { Box::from_raw(second) };
    
    let array = &*first / &*second;
    Box::into_raw(first);
    Box::into_raw(second);

    return super::get_pointer(array);
}
#[no_mangle]
pub fn divAssign_{{T}}(first: *mut Array<{{T}}>, second: *mut Array<{{T}}>) -> *const Array<{{T}}> {
    let first = unsafe { Box::from_raw(first) };
    let second = unsafe { Box::from_raw(second) };
    
    let mut temp = &*first;
    temp /= &*second;
    Box::into_raw(second);

    return Box::into_raw(first);
}
{{/generate}}