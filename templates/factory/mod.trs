extern crate numas;
use numas::array::Array;

// factory
{{generate}}
#[no_mangle]
pub fn full_{{T}}(value: {{T}}, shape: *mut Vec<i32>) -> *mut Array<{{T}}> {
    let vec_shape = unsafe { Box::from_raw(shape) };
    let array = numas::factory::fill::full::<{{T}}>(value, *vec_shape);
    return super::get_pointer(array);
}

#[no_mangle]
pub fn zeros_{{T}}(shape: *mut Vec<i32>) -> *const Array<{{T}}> {
    let vec_shape = unsafe { Box::from_raw(shape) };
    let array = numas::factory::fill::zeros::<{{T}}>(*vec_shape);
    return super::get_pointer(array);
}

#[no_mangle]
pub fn zeroes_{{T}}(shape: *mut Vec<i32>) -> *const Array<{{T}}> {
    let vec_shape = unsafe { Box::from_raw(shape) };
    let array = numas::factory::fill::zeroes::<{{T}}>(*vec_shape);
    return super::get_pointer(array);
}

#[no_mangle]
pub fn ones_{{T}}(shape: *mut Vec<i32>) -> *const Array<{{T}}> {
    let vec_shape = unsafe { Box::from_raw(shape) };
    let array = numas::factory::fill::ones::<{{T}}>(*vec_shape);
    return super::get_pointer(array);
}
{{/generate}}
